name: .NET

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Restore dependencies
        run: dotnet restore
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: SonarQube Start
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"Admiralfeb_ed-calculations-net" /o:"admiralfeb" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths='TestResults/*.trx' /d:sonar.cs.opencover.reportsPaths='./**/coverage.opencover.xml'
      - name: Build
        run: dotnet build --no-restore /p:ContinuousIntegrationBuild=true
      - name: Test
        run: dotnet test --no-build --logger trx -r TestResults --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      - name: SonarQube End
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: Codecov
        uses: codecov/codecov-action@v1
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 'Test Results'
          path: '**/**/*.trx'
          reporter: dotnet-trx
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Login to Nuget
        run: dotnet nuget add source --username Admiralfeb --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Admiralfeb/index.json"
            - name: Pack Nuget
        if: github.ref == 'refs/heads/main'
        run: dotnet pack -c Release
      - name: Push Nuget
        run: dotnet nuget push "**/Release/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"
